# QuickGO Query
library(httr)
library(jsonlite)
library(xml2)
requestURL <- "https://www.ebi.ac.uk/QuickGO/services/geneproduct/search?query=ACTN6"
r <- GET(requestURL, accept("application/json"))
stop_for_status(r)
json <- toJSON(content(r))
head(fromJSON(json))
requestURL <- "https://www.ebi.ac.uk/QuickGO/services/ontology/go/about"
r <- GET(requestURL, accept("application/json"))
stop_for_status(r)
json <- toJSON(content(r))
head(fromJSON(json))
setwd('~/Desktop/neo4j-test/zfish_data/')
library(tidyverse)
# get interactor data from PsicQuic
psicquic_interactors <- read_csv("interactors.csv")
# get interactor data from PsicQuic
psicquic_interactors <- read_csv("interactors.csv")
# how many unique interactors? not very many...
length(unique(psicquic_interactors$ID))
# make sure that there are no missing values
psicquic_interactors <- subset(psicquic_interactors, !is.na(ID))
psicquic_interactors <- psicquic_interactors %>% distinct(ID, .keep_all = TRUE)
psicquic_interactors <- psicquic_interactors[,c(1,2,13,15,18,19)]
colnames(psicquic_interactors) <- c("ID", "shortLabel",
"primaryRefDb", "primaryRefId",
"secondaryRefDb", "secondaryRefId")
# it appears we are missing two values, let's manually find these since there are only 2
# subset(psicquic_interactors, is.na(uniprotId))
psicquic_interactors$uniprotId <- case_when(
psicquic_interactors$primaryRefDb == "uniprotkb" ~ psicquic_interactors$primaryRefId,
psicquic_interactors$secondaryRefDb == "uniprotkb" ~ psicquic_interactors$secondaryRefId,
psicquic_interactors$shortLabel == "EBI-2213356" ~ "Q2YDS1",
psicquic_interactors$shortLabel == "EBI-1536909" ~ "A2A121"
)
psicquic_interactorsIDs <- psicquic_interactors %>% select(ID, uniprotId)
# get interaction data from PsicQuic
psicquic_interactions <- read_csv("interactions.csv")
# change names to more readable ones
colnames(psicquic_interactions) <- c("ID", "InteractorRef1", "InteractorRef2")
# first join the IDs for Ref1
psicquic_interactome <- left_join(psicquic_interactions, psicquic_interactorsIDs, by = c("InteractorRef1" = "ID"), relationship="many-to-many")
# then join the IDs for Ref2
psicquic_interactome <- left_join(psicquic_interactome, psicquic_interactorsIDs, by = c("InteractorRef2" = "ID"), relationship="many-to-many")
colnames(psicquic_interactome) <- c("interactionID", "InteractorRef1", "InteractorRef2", 'uniprotID1', "uniprotID2")
# extract only the necessary information
psicquic_interactome <-
psicquic_interactome %>%
select(uniprotID1, uniprotID2) %>%
mutate(source = "psicquic")
# read the file in
string_db_interactome <- read_delim("stringdb-zfish-interactome.txt", delim = " ")
# get only the data from String-DB that has experimental evidence
string_db_interactome <- string_db_interactome %>% filter(experiments > 0)
# select only the relevant information
string_db_interactome <- string_db_interactome %>% select(protein1, protein2)
# get the mapping data to get uniprot aliases
string_db_names <- read_tsv("7955.protein.aliases.v12.0.txt")
string_db_names <- string_db_names %>%
filter(source == "UniProt_AC") %>%
select(string_protein_id, alias)
# join the uniprot IDs for protein1
string_db_interactome <- left_join(string_db_interactome, string_db_names, by = c("protein1" = "string_protein_id"), relationship = "many-to-many")
# join the uniprot IDs for protein2
string_db_interactome <- left_join(string_db_interactome, string_db_names, by = c("protein2" = "string_protein_id"), relationship = "many-to-many")
# rename the columns to prepare to merge datasets
colnames(string_db_interactome) <- c("protein1", "protein2", "uniprotID1", "uniprotID2")
# extract only the relevant information
string_db_interactome <-
string_db_interactome %>%
select(uniprotID1, uniprotID2) %>%
mutate(source = "string-db")
zfish_interactome <- rbind(string_db_interactome, psicquic_interactome)
common_names <- read_tsv("zebrafish_uniprot_mapper.tsv")
common_names <- common_names %>% select(Entry, `Protein names`)
zfish_interactome <- inner_join(zfish_interactome, common_names, by = c("uniprotID1" = "Entry"))
zfish_interactome <- inner_join(zfish_interactome, common_names, by = c("uniprotID2" = "Entry"))
colnames(zfish_interactome) <- c("uniprotID1", "uniprotID2", "source","name1", "name2")
deleted_interactions <- zfish_interactome %>% filter(name1 == "deleted") %>% filter(name2 == "deleted")
zfish_interactome <- zfish_interactome %>% filter(name1 != "deleted") %>% filter(name2 != "deleted")
View(zfish_interactome)
zfish_interactome %>% mutate(name1 = str_extract(alt_name1, "^[^(]*"))
colnames(zfish_interactome) <- c("uniprotID1", "uniprotID2", "source","alt_name1", "alt_name2")
deleted_interactions <- zfish_interactome %>% filter(alt_name1 == "deleted") %>% filter(alt_name2 == "deleted")
zfish_interactome <- zfish_interactome %>% filter(alt_name1 != "deleted") %>% filter(alt_name2 != "deleted")
zfish_interactome %>% mutate(name1 = str_extract(alt_name1, "^[^(]*"))
common_names <- read_tsv("zebrafish_uniprot_mapper.tsv")
common_names <- common_names %>% select(Entry, `Protein names`)
zfish_interactome <- inner_join(zfish_interactome, common_names, by = c("uniprotID1" = "Entry"))
zfish_interactome <- inner_join(zfish_interactome, common_names, by = c("uniprotID2" = "Entry"))
colnames(zfish_interactome) <- c("uniprotID1", "uniprotID2", "source","alt_name1", "alt_name2")
deleted_interactions <- zfish_interactome %>% filter(alt_name1 == "deleted") %>% filter(alt_name2 == "deleted")
zfish_interactome <- rbind(string_db_interactome, psicquic_interactome)
common_names <- read_tsv("zebrafish_uniprot_mapper.tsv")
common_names <- common_names %>% select(Entry, `Protein names`)
zfish_interactome <- inner_join(zfish_interactome, common_names, by = c("uniprotID1" = "Entry"))
zfish_interactome <- inner_join(zfish_interactome, common_names, by = c("uniprotID2" = "Entry"))
colnames(zfish_interactome) <- c("uniprotID1", "uniprotID2", "source","alt_name1", "alt_name2")
deleted_interactions <- zfish_interactome %>% filter(alt_name1 == "deleted") %>% filter(alt_name2 == "deleted")
zfish_interactome <- zfish_interactome %>% filter(alt_name1 != "deleted") %>% filter(alt_name2 != "deleted")
zfish_interactome <- zfish_interactome %>% mutate(name1 = str_extract(alt_name1, "^[^(]*"),
name2 = str_extract(alt_name2, "^[^(]*"))
View(zfish_interactome)
write_tsv(zfish_interactome, "./zfish_interactome.txt")
library(tidyverse)
View(read_delim( "~/Downloads/BIOGRID-ORGANISM-4.4.228.tab3/BIOGRID-ORGANISM-Bacillus_subtilis_168-4.4.228.tab3", delim = "\t"))
read_delim( "~/Downloads/BIOGRID-ORGANISM-4.4.228.tab3/BIOGRID-ORGANISM-Bacillus_subtilis_168-4.4.228.tab3.txt", delim = "\t")
%>% View()
read_delim( "~/Downloads/BIOGRID-ORGANISM-4.4.228.tab3/BIOGRID-ORGANISM-Bacillus_subtilis_168-4.4.228.tab3.txt", delim = "\t") %>%
View()
read_delim( "~/Downloads/BIOGRID-ORGANISM-4.4.228.tab3/BIOGRID-ORGANISM-Drosophila_melanogaster-4.4.228.tab3.txt", delim = "\t") %>%
View()
# Load the rvest package for web scraping
library(rvest)
library(tidyverse)
setwd("~/Desktop/GitHub_Repos/bio-net-viz/data/GeneOntology/")
read_delim("go.txt")
go_terms <- read_delim("go.txt")
?full_join
left_join(go_terms, do_not_annotate)
# URL of the webpage to get the list of GO terms that should never be annotated
url <- 'https://gowiki.tamu.edu/wiki/index.php/Category:GO:gocheck_do_not_manually_annotate'
# Send a GET request to the webpage and parse HTML content
webpage <- read_html(url)
# URL of the webpage to get the list of GO terms that should never be annotated
url <- 'https://gowiki.tamu.edu/wiki/index.php/Category:GO:gocheck_do_not_manually_annotate'
# Send a GET request to the webpage and parse HTML content
webpage <- read_html(url)
# Send a GET request to the webpage and parse HTML content
webpage <- read_html(url)
do_not_annotate <- read_delim("go_neverAnnotate.txt")
View(do_not_annotate)
left_join(go_terms, do_not_annotate)
left_join(go_terms, do_not_annotate) %>% mutate(annotated = case_when(
annotated == TRUE ~ TRUE,
annotated == NA ~ FALSE)
)
left_join(go_terms, do_not_annotate) %>% mutate(never_annotate = case_when(
annotated == FALSE ~ TRUE,
annotated == NA ~ FALSE
))
go_terms <- left_join(go_terms, do_not_annotate)
go_terms["annotated"][is.na(go_terms["annotated"])] <- TRUE
View(go_terms)
View(go_terms)
write_delim(go_terms, "go_2024-03-28.txt")
